package elvis.leetcode;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import com.alibaba.fastjson.JSONObject;
import org.apache.lucene.analysis.CharArrayMap;

public class LeetCodeCommon2 {
    /**
     * https://leetcode.cn/problems/subsets-ii/
     *
     * @param nums
     * @return
     */
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        return new ArrayList<>(dfs_subsetsWithDup(nums, 0));
    }

    private Set<List<Integer>> dfs_subsetsWithDup(int[] nums, int index) {
        Set<List<Integer>> ans = new HashSet<>();
        if (index == nums.length) {
            ans.add(new ArrayList<>());
            return ans;
        }
        for (List<Integer> subList : dfs_subsetsWithDup(nums, index + 1)) {
            ans.add(subList);
            List<Integer> copy = new ArrayList<>(subList);
            copy.add(nums[index]);
            ans.add(copy);
        }
        return ans;
    }

    int n;
    Set<List<Integer>> ans;

    public List<List<Integer>> permuteUnique(int[] nums) {
        n = nums.length;
        ans = new HashSet<>();
        Arrays.sort(nums);
        boolean[] visited = new boolean[n];
        dfs_permuteUnique(new ArrayList<>(), visited, nums);
        return new ArrayList<>(ans);
    }

    public void dfs_permuteUnique(List<Integer> cur, boolean[] visited, int[] nums) {
        if (cur.size() == n) {
            ans.add(new ArrayList<>(cur));
            return;
        }
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                visited[i] = true;
                cur.add(nums[i]);
                dfs_permuteUnique(cur, visited, nums);
                cur.remove(cur.size() - 1);
                visited[i] = false;
            }
        }
    }

    /**
     * https://leetcode.cn/problems/maximum-sum-of-almost-unique-subarray/
     *
     * @param nums
     * @param x
     * @return
     */
    public int minOperations(int[] nums, int x) {
        int n = nums.length;
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        int tar = sum - x;
        if (tar < 0) {
            return -1;
        }
        int max = -1;
        int l = 0, r = 0, cur = 0;
        while (r < n) {
            cur += nums[r++];
            while (cur > tar && l < r) {
                cur -= nums[l++];
            }
            if (cur == tar) {
                max = Math.max(r - l, max);
            }
        }
        return max == -1 ? -1 : n - max;
    }

    /**
     * https://leetcode.cn/problems/make-array-strictly-increasing/
     *
     * @param arr1
     * @param arr2
     * @return
     */
    public int makeArrayIncreasing(int[] arr1, int[] arr2) {
        Arrays.sort(arr2);
        arr2 = Arrays.stream(arr2).distinct().sorted().toArray();
        int n = arr1.length;
        int m = arr2.length;
        int[][] dp = new int[n + 1][Math.min(m, n) + 1];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[0][0] = -1;
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= Math.min(i, m); j++) {
                /* 如果当前元素大于序列的最后一个元素 */
                if (arr1[i - 1] > dp[i - 1][j]) {
                    dp[i][j] = arr1[i - 1];
                }
                if (j > 0 && dp[i - 1][j - 1] != Integer.MAX_VALUE) {
                    /* 查找严格大于 dp[i - 1][j - 1] 的最小元素 */
                    int idx = binarySearch(arr2, j - 1, dp[i - 1][j - 1]);
                    if (idx != arr2.length) {
                        dp[i][j] = Math.min(dp[i][j], arr2[idx]);
                    }
                }
                if (i == n && dp[i][j] != Integer.MAX_VALUE) {
                    return j;
                }
            }
        }
        return -1;
    }

    public int binarySearch(int[] nums, int low, int target) {
        int high = nums.length;
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] > target) {
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    /**
     * https://leetcode.cn/problems/n-queens/solutions/398929/nhuang-hou-by-leetcode-solution/
     *
     * @param n
     * @return
     */
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> solutions = new ArrayList<>();
        int[] queens = new int[n];
        //-1代表没有皇后
        Arrays.fill(queens, -1);
        //记录包含的列
        Set<Integer> columns = new HashSet<>();
        //记录包含的'\'式斜行
        Set<Integer> diagonals1 = new HashSet<>();
        //记录包含'/'式斜行
        Set<Integer> diagonals2 = new HashSet<>();
        backtrack(solutions, queens, n, 0, columns, diagonals1, diagonals2);
        return solutions;
    }

    public void backtrack(List<List<String>> solutions, int[] queens, int n, int row, Set<Integer> columns, Set<Integer> diagonals1, Set<Integer> diagonals2) {
        //当搜索到row = n的时候表示前面都已经填满皇后
        if (row == n) {
            List<String> board = generateBoard(queens, n);
            solutions.add(board);
        } else {
            //循环第row行, 第i列的值
            for (int i = 0; i < n; i++) {
                if (columns.contains(i)) {
                    continue;
                }
                int diagonal1 = row - i;
                if (diagonals1.contains(diagonal1)) {
                    continue;
                }
                int diagonal2 = row + i;
                if (diagonals2.contains(diagonal2)) {
                    continue;
                }
                queens[row] = i;
                columns.add(i);
                diagonals1.add(diagonal1);
                diagonals2.add(diagonal2);
                backtrack(solutions, queens, n, row + 1, columns, diagonals1, diagonals2);
                queens[row] = -1;
                columns.remove(i);
                diagonals1.remove(diagonal1);
                diagonals2.remove(diagonal2);
            }
        }
    }

    public List<String> generateBoard(int[] queens, int n) {
        List<String> board = new ArrayList<String>();
        for (int i = 0; i < n; i++) {
            char[] row = new char[n];
            Arrays.fill(row, '.');
            row[queens[i]] = 'Q';
            board.add(new String(row));
        }
        return board;
    }

    static int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

    /**
     * https://leetcode.cn/problems/unique-paths-iii/solutions/2365866/bu-tong-lu-jing-iii-by-leetcode-solution-cndw/
     *
     * @param grid
     * @return
     */
    public int uniquePathsIII(int[][] grid) {
        int r = grid.length, c = grid[0].length;
        int si = 0, sj = 0, n = 0;
        //初始化,计算总节点数量,查询开始节点坐标
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (grid[i][j] == 0) {
                    n++;
                } else if (grid[i][j] == 1) {
                    n++;
                    si = i;
                    sj = j;
                }
            }
        }
        return dfs(grid, si, sj, n);
    }

    public int dfs(int[][] grid, int i, int j, int n) {
        //目标节点为终点,并且没有没有未被遍历的节点则返回1
        if (grid[i][j] == 2) {
            return n == 0 ? 1 : 0;
        }
        int r = grid.length, c = grid[0].length;
        int t = grid[i][j];
        grid[i][j] = -1;
        int res = 0;
        //遍历4个方向
        for (int[] dir : dirs) {
            int ni = i + dir[0], nj = j + dir[1];
            //目标为0或者2时可遍历
            if (ni >= 0 && ni < r && nj >= 0 && nj < c && (grid[ni][nj] == 0 || grid[ni][nj] == 2)) {
                res += dfs(grid, ni, nj, n - 1);
            }
        }
        //回溯状态
        grid[i][j] = t;
        return res;
    }


    public Map<Integer, List<Integer>> adjvex;
    public Stack<Integer> path;

    /**
     * https://leetcode.cn/problems/valid-arrangement-of-pairs/
     *
     * @param pairs
     * @return
     */
    public int[][] validArrangement(int[][] pairs) {
        adjvex = new HashMap<>();
        path = new Stack<>();
        Map<Integer, Integer> indegree = new HashMap<>();
        Map<Integer, Integer> outdegree = new HashMap<>();
        //初始化有向图
        for (int[] p : pairs) {
            int x = p[0];
            int y = p[1];
            outdegree.put(x, outdegree.getOrDefault(x, 0) + 1);
            indegree.put(y, indegree.getOrDefault(y, 0) + 1);
            adjvex.putIfAbsent(x, new ArrayList<>());
            adjvex.get(x).add(y);
        }

        //搜索出度大于入度的点作为起始点
        List<Integer> starts = new ArrayList<>();
        for (Map.Entry<Integer, List<Integer>> entry : adjvex.entrySet()) {
            int x = entry.getKey();
            if (outdegree.get(x) > indegree.getOrDefault(x, 0)) {
                starts.add(x);
            }
        }
        int start = !starts.isEmpty() ? starts.get(0) : pairs[0][0];

        validArrangement_dfs(start);
//        Collections.reverse(path);

        int[][] res = new int[pairs.length][];
        int i = 0;
        while (path.size() > 1) {
            res[i] = new int[]{path.pop(), path.peek()};
            i++;
        }
        return res;
    }

    public void validArrangement_dfs(int x) {
        while (adjvex.containsKey(x) == true && !adjvex.get(x).isEmpty()) {
            int y = adjvex.get(x).get(adjvex.get(x).size() - 1);
            adjvex.get(x).remove(adjvex.get(x).size() - 1);
            validArrangement_dfs(y);
        }
        path.add(x);

    }


    List<List<Integer>> list;
    int[] candidates;
    int target;

    /**
     * https://leetcode.cn/problems/combination-sum/
     *
     * @param candidates
     * @param target
     * @return
     */
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        list = new ArrayList<>();
        this.candidates = candidates;
        this.target = target;
        Arrays.sort(candidates);
        dfs_combinationSum(candidates.length - 1, new ArrayList<>(), 0);
        return list;
    }

    public void dfs_combinationSum(int i, List<Integer> choice, int total) {
        if (total == target) {
            list.add(new ArrayList<>(choice));
            return;
        }
        if (i < 0) return;
        int j;
        dfs_combinationSum(i - 1, choice, total);
        for (j = 1; total + j * candidates[i] <= target; j++) {
            choice.add(candidates[i]);
            dfs_combinationSum(i - 1, choice, total + j * candidates[i]);
        }
        for (int k = 1; k < j; k++) {
            choice.remove(choice.size() - 1);
        }
    }

    /**
     * https://leetcode.cn/problems/find-the-longest-equal-subarray/?envType=daily-question&envId=2024-05-23
     *
     * @param nums
     * @param k
     * @return
     */
    public int longestEqualSubarray(List<Integer> nums, int k) {
        return 0;
    }

    /**
     * https://leetcode.cn/problems/maximum-strictly-increasing-cells-in-a-matrix/
     *
     * @param mat
     * @return
     */
    public int maxIncreasingCells(int[][] mat) {
        /**
         1.所有的点初始化为-1
         2.从数字最小的点开始，设置为1，并且已访问，
         3.横纵行比自己大且未访问的数字，放入队列
         4.直到队列空
         5.再把最小的未访问的数字放到队列中，重复2-4，直到所有节点都被访问
         */
        int row = mat.length, col = mat[0].length;

        //记录每行最大值，和每列最大值
        int[] rowMax = new int[row];
        int[] colMax = new int[col];
        Arrays.fill(rowMax, 0);
        Arrays.fill(colMax, 0);

        //剩下多少节点未访问
        //int rest = row * col;
        //int[3]: 数值大小，row值，col值
        Map<Integer, ArrayList<int[]>> map = new HashMap<>();
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                map.putIfAbsent(mat[i][j], new ArrayList<>());
                map.get(mat[i][j]).add(new int[]{i, j});
            }
        }

        List<Integer> keys = map.keySet().stream().sorted().collect(Collectors.toList());

        int max = -1;
        for (Integer key : keys) {
            List<int[]> posList = map.get(key);

            int roundMax = -1;

            List<Integer> maxList = new ArrayList<>();
            for (int[] pos : posList) {
                int r = pos[0], c = pos[1];
                int posMax = Math.max(rowMax[r], colMax[c]) + 1;
                roundMax = Math.max(roundMax, posMax);
                maxList.add(posMax);
            }
            for(int i=0;i<posList.size();i++){
                int[] pos = posList.get(i);
                
            }
        }
        return max;
    }

    public static void main(String[] args) {
        LeetCodeCommon2 lc = new LeetCodeCommon2();

        System.out.println(lc.maxIncreasingCells(new int[][]{{3, 1}, {3, 4}}));
//        System.out.println(lc.maxIncreasingCells(new int[][]{{1, 1}, {1, 1}}));
//        System.out.println(lc.maxIncreasingCells(new int[][]{{3, 1, 6}, {-9, 5, 7}}));
//        System.out.println(lc.maxIncreasingCells(new int[][]{{8, 9, 1}, {3, 4, 7}, {2, 5, 6}}));
//        System.out.println(lc.maxIncreasingCells(new int[][]{{-59, -76, 10, 66, 44, -63, -37, -58, -8, -51, 64, 16, -78, 93, 15, 39, -23, -75, 98, -38, -56, 59, 63, -93, -74, 22, -85, -53, 64, 9, 60, -37, 34, -14, -85, -94, -35, 5, 71, 19, -26, 3, -73, -94, 79, 93, 32, -47, 8, -10, 91, 24, -2, -69, -46, -68, 96, 67, -66, 57, -3, 24, 82, -16, 84, 71, -35, -96, -39, 55, 33, 53, -30, 32, 60, -70, 19, -29, -37, -62, -1, 71, 54, -53, -96, 51, -19, -7, -64, 98}, {59, 32, -33, 7, -83, -64, 71, -95, 80, 22, -2, 60, 23, -30, -71, 27, 19, 6, -28, -70, 9, 5, 9, 46, 85, 10, 20, 51, 78, 16, 88, 98, 44, -90, -82, -27, -31, -60, 84, -73, -37, 67, -15, -26, 28, -5, 35, 81, 85, 46, 24, 1, 15, -62, 11, -59, -96, 31, -71, -41, 72, 9, 67, -42, 73, 83, -1, 6, -63, 6, 77, -72, 32, -95, 26, -49, 49, -58, 100, -42, -41, -53, 71, 48, 49, -3, 94, -84, 12, 86}, {43, 87, 54, -21, -32, -58, -96, 53, 58, -81, 79, 27, -77, -7, -1, -53, -17, 93, -43, -18, 66, 67, -82, 7, -91, 6, -63, 2, 57, -15, 80, -23, -53, -2, 21, 62, -85, -82, -89, 81, 61, 41, -73, 66, 85, 82, 7, 57, -38, -71, -28, -14, 36, 81, 57, 12, 36, 89, -76, 32, 77, 35, 23, 1, -4, -99, -73, -21, 16, -37, 60, 80, -2, -88, 5, -28, -19, 27, 45, -14, 3, -39, 75, 37, -68, 48, 19, -2, -39, 9}, {32, -69, -2, -47, 33, 84, -93, 49, 56, -81, -46, 18, 51, 80, 74, 78, -49, 99, 93, -57, 97, -45, 34, 83, 100, 78, -73, 36, 6, 93, 99, 26, -77, -34, 97, 71, -64, 9, -15, -73, 59, -9, -8, -2, 25, 66, 22, -52, -70, 33, -40, 42, -27, 82, 35, 89, -44, -94, 80, 22, -56, 49, -80, -2, 32, -57, 81, 6, 70, -32, 68, -82, -19, 41, 4, 12, -46, -21, -6, 97, -36, 59, 21, -96, -77, 51, -42, -59, 63, 90}, {16, -80, -15, 94, 3, 12, -62, -49, -15, 100, -54, 18, -66, -77, 78, 75, -89, 63, 66, -27, 20, 7, 63, -30, 65, 27, -24, -91, 92, -65, -11, 60, 92, 42, 95, 81, -64, -25, 56, 41, 46, 61, -13, 51, -7, -98, 70, -55, 30, 23, -19, -93, 34, -19, 94, 69, -7, -25, 52, 84, -6, 97, -73, 66, -50, 36, -4, -44, -21, -96, 99, -48, 30, 24, -82, 48, -13, -76, -10, -25, 57, 23, 85, -13, -96, -92, 27, -79, -31, 3}, {56, 1, 64, -68, 17, -92, 50, -23, -84, 67, 20, 41, -15, 62, 17, 27, -56, -70, -35, -1, 88, -8, -6, 21, -62, 28, 21, 44, 46, 44, -59, 79, -24, 56, 74, -40, 60, 94, -46, -34, 30, 67, -97, 61, 81, 20, 68, 43, -23, 86, 24, 16, -53, 86, 52, -56, -25, 39, 46, 62, -77, -34, -49, 81, -72, 21, -16, 8, 33, -100, -61, 58, -9, 76, -13, 11, -54, -45, -100, -29, -15, 58, -6, 15, -72, -53, 81, 33, 38, -79}, {-35, -6, -13, 38, 48, 89, -81, 69, -33, -26, -50, 5, 0, 18, 16, 1, -65, 64, 49, -72, -17, 44, -9, -7, -82, 31, 75, -7, 62, 61, 69, 53, -95, -14, 3, 37, 60, 59, -10, -90, -31, 27, 36, -45, -65, 47, 34, 77, 21, 73, -85, 15, 88, -52, -37, 14, 83, -84, 8, -25, -65, -3, 63, -45, 0, 2, -3, 33, 91, -72, 0, -2, 47, -50, 52, 28, 21, -33, 75, 28, 11, -1, -33, 51, 67, 89, 86, -77, 11, 31}, {-58, 24, -15, -88, 94, 29, -75, 82, -22, -71, -26, 52, 3, 29, -93, -34, 18, -24, -4, -29, -100, -32, 38, -38, -38, 89, -45, 50, 31, 25, -53, 14, 24, -32, -100, 63, -32, 61, -1, 48, -62, -8, 30, -70, -31, -25, -47, 51, 47, -23, 33, 54, 72, -29, -92, -4, -96, -83, -91, -57, -27, 89, 18, -90, -59, 0, -23, 0, -5, 6, 21, -20, -29, -15, 26, -14, -85, 20, -51, 64, -41, -88, -66, -14, 12, -17, -93, -70, 4, 54}, {66, 3, 37, -74, 24, 64, 84, -19, 65, -79, 46, 48, 3, -87, 1, -2, 91, -23, 22, -8, 29, 25, 1, 2, -54, -70, -50, -76, -22, -7, 37, 90, -63, -1, -72, 8, 78, 96, 87, 46, -81, 98, 30, 76, 31, -65, -95, -35, -97, -29, -73, 56, 29, -97, 57, -19, -91, 18, -72, 17, 4, -8, 7, 38, -84, 8, -37, -57, 57, 72, -11, 34, -67, -3, 88, -11, 55, 50, 93, -3, -12, -19, -34, -35, 53, 71, 40, 40, -23, 0}, {40, 81, -54, 29, 8, -12, 2, 87, 29, -79, -67, -86, -82, 2, 56, 43, 76, -71, 76, 89, 28, 78, 76, -20, -7, 18, 60, -22, -8, 44, -19, -11, 53, -73, -7, 23, 59, 54, -14, 53, -15, 97, -87, -72, 60, -5, 79, -13, 68, -90, -3, 25, -91, 84, 81, 67, -16, -60, 50, 62, 22, -39, -33, -54, 13, -76, -31, -51, -44, -65, 56, -83, 11, -9, 67, 64, 5, 93, -70, 11, -99, -43, -40, 17, 68, -75, -26, 27, 75, -95}, {55, -77, -92, 68, -11, -29, 33, -34, -51, -5, -11, -4, 5, 5, -83, -98, -3, -54, 50, -93, -48, 86, -17, -100, -61, 40, -37, 67, -53, -67, 92, -15, -39, -48, 77, -52, 80, -5, -19, 3, 74, -92, -87, 94, 0, -23, 37, 3, -83, 18, 83, -3, 78, 13, -82, -4, -57, 91, 76, 29, 84, -47, 3, -32, -79, -6, 45, -38, -73, 63, -18, -40, -47, 95, 4, -36, -49, 79, 88, 44, 66, -62, -67, 13, -37, -45, -13, -28, 12, 53}, {60, -43, -84, -29, -5, -84, 35, -90, -82, -29, 92, -53, 100, 8, -45, 66, -17, -80, 42, 93, -58, 19, -88, 3, 26, 97, -78, -100, -16, 17, -92, -82, 50, 74, -11, -11, 17, -8, -7, -20, 13, -84, -42, -47, -74, -48, 87, 35, -72, 21, -21, 83, -87, 5, -36, 68, 29, 56, -64, -95, 96, 29, -21, 30, -40, 53, 40, 7, -11, -41, 93, 79, 61, -12, 25, 14, -93, -41, 90, -79, 69, -58, 42, 9, -6, -79, 5, 42, -49, -81}, {-43, -43, 32, 46, -63, -37, -78, -9, -99, -68, -30, -58, 74, 37, -73, 10, 34, 64, 88, -95, 83, 30, 76, 15, -18, -57, -23, -57, 2, 43, 72, 73, 1, 33, 29, -68, -64, 14, -68, 45, 22, -97, -99, 87, -54, 4, 61, 88, 79, 95, -19, -86, 24, -14, 69, -93, -47, 92, -84, -44, 96, 72, 39, -13, 31, 56, 78, 62, 60, 98, -43, -25, 70, 50, 34, -43, -84, -19, 8, 18, -92, 97, -59, -89, 38, 79, -29, -41, -57, -11}, {60, 48, -19, 10, 4, -10, -69, 85, -85, -59, 22, -75, -93, 45, -97, -36, -83, -54, 97, 98, -15, 43, -30, 31, -57, 8, -26, 19, 68, 7, 45, 71, 24, -13, 77, -59, 85, -76, 53, 68, 18, 99, -37, -69, -66, -98, 25, 11, 16, 93, -96, -5, -27, -34, -64, -87, -34, 71, 90, 93, 54, 49, -82, -92, -64, 84, -93, 39, -92, 4, -46, -7, 72, -91, 96, -96, -13, -97, 55, 39, 14, -49, 26, 48, -21, 53, 33, 20, -91, -30}, {94, 73, 80, 36, 88, 16, -90, -32, 3, 87, -99, 45, -22, 35, 36, 0, -54, 31, 3, -44, -16, 4, -54, -44, -75, -92, -6, 53, 37, -72, -55, -90, -99, 72, 60, -35, 62, 24, 46, -71, 70, 34, 8, -39, 71, -72, 50, 26, 65, -58, 77, -96, 94, -60, 21, 29, 53, 11, 62, -79, 2, 43, -23, 35, -25, -85, -22, 21, 32, -37, -85, 17, 74, -62, -40, -39, -31, -70, 66, 55, -3, -12, -35, 24, -86, -10, 74, -90, 63, -23}, {-1, 93, 67, 62, -25, 23, 50, -93, -55, 42, -43, 34, -56, -74, 73, -96, 14, 38, -46, 14, 62, 80, -36, 92, 28, 52, 60, -30, 84, 90, 30, 90, -100, -51, 2, -1, -28, -72, -77, 11, 29, 38, 96, 36, 6, -3, 36, -31, 88, 60, 36, -31, -19, 73, 5, 35, -51, 44, 12, -46, -56, 10, -39, -99, -45, 27, 0, -89, -45, 9, -43, -93, 24, 33, 44, 94, 47, -23, 25, 0, -72, -23, -81, -28, -6, 62, -8, 6, 38, -28}, {-30, 5, 58, -100, 88, -66, 96, 76, -100, -54, -44, 42, 40, -93, 28, -79, 91, -68, -78, 28, -5, -52, 85, -2, 68, 97, -39, -58, 2, 98, 68, 98, -15, 41, -2, 12, -72, 95, 27, 52, -91, 27, -2, 81, -69, 96, -43, -35, -19, 81, 13, 31, -91, -53, -88, -19, -88, -14, -26, -98, -71, -48, 93, 37, -30, -8, 31, 82, 87, 13, 30, -6, -59, -52, -97, -77, -56, -57, 61, -12, -5, -19, -29, -6, -46, 96, 58, 75, -80, 72}, {-46, -90, -99, 50, -17, 98, -29, 28, 83, 39, 41, 73, 21, 9, 4, -51, -51, 66, -100, 69, -25, 86, 5, -39, -35, 16, -54, -56, 54, -73, -35, -72, 85, 9, 58, -61, -22, -33, 0, 1, 83, -8, 17, 90, -49, -3, -83, 45, 74, -63, -85, 31, 8, -37, -6, -8, -97, -49, 51, -38, 77, 0, 46, 99, 79, -66, -44, -7, -6, -24, 25, -12, -49, -89, -83, 54, 87, -67, -66, -78, -76, 70, 76, 13, 75, 68, -64, -82, -80, -64}, {-100, 21, -16, 36, -93, 9, -79, 50, 78, -14, 17, -45, 36, 5, 7, 62, 89, 51, 69, -1, -36, -17, -69, -2, -20, -94, -65, -94, -88, -81, -32, 62, 81, -99, 58, 82, -29, -43, 30, -9, 88, -100, -62, 44, -35, -74, -22, -6, 47, -43, -3, 66, -29, -4, 55, -13, -85, 18, -69, -18, -60, 3, -69, -3, 100, 60, 84, 35, 85, 19, -7, -39, -25, -34, 96, 5, 64, -71, 18, -65, -35, -31, -14, -75, 5, -54, 59, 24, 26, 62}, {-13, 0, -20, -85, -80, -49, 57, 62, -44, 100, 49, -62, -9, 70, -74, -74, 96, -34, 41, -47, -25, 74, 82, 57, 81, 18, -9, 24, -78, -62, 95, 73, -27, -61, -97, -11, -47, -100, -98, 100, -82, 2, 77, -94, -70, -77, -81, 90, 46, 76, 83, -53, -86, 61, 68, -72, -98, -16, 3, 27, 40, -17, 80, -57, 34, 2, 80, -24, 77, 50, 28, -3, -50, -70, -46, -9, 27, -70, -87, 3, 64, -42, -78, 7, -19, 60, -46, -78, 9, -92}, {73, -97, 1, 39, 82, 53, -35, -10, 8, 62, -22, 32, -78, 68, 91, 84, 9, -41, 94, -68, 93, 45, 37, -89, 78, 17, 37, 58, -51, -28, -54, -39, -81, 68, -5, -56, -57, 95, -77, -48, 70, 39, -99, 10, -35, 65, 2, 31, 59, -73, -81, 10, 2, 73, 72, -5, 79, 46, -63, 37, 64, 66, 86, 56, -37, -11, -36, 71, -23, 94, -6, 48, -41, -40, 5, 44, -68, 34, -4, 70, 44, -82, -33, 61, -23, 60, 79, -36, -9, -61}, {-86, -91, 92, 34, 30, -15, -35, 94, -19, -70, 13, -81, -19, -56, 60, 81, 66, 54, -85, -47, 4, -50, -48, 82, 74, 8, -28, 39, -88, -64, -30, 44, 63, 85, 34, 83, -98, 42, -50, 7, -6, 6, 9, -17, -8, 36, -82, -51, 55, 71, -35, -27, -51, 0, 85, -22, 55, -27, 37, 42, -56, -18, -15, -27, 7, 3, -37, 50, -33, -17, -94, 7, -49, -84, -3, -91, 83, -9, -87, 18, -25, -67, 4, -70, -62, 98, -60, 75, 53, 88}, {45, -76, -69, 96, 40, -46, 48, -84, -2, 91, 55, -39, 1, -71, 93, 92, -63, 65, -11, -72, -8, -3, -13, -68, -55, -73, 85, -71, -6, 39, -24, 24, -15, 83, -75, -54, 79, -28, -38, 18, 96, 8, 85, -9, -19, -77, 18, -46, -83, -27, 25, -75, 22, -62, 86, -96, 60, 2, 36, -51, -67, -43, 54, 56, -71, 8, 22, -32, -99, 5, -84, -39, -73, -53, 60, -84, 12, -48, 29, -41, 56, 24, 50, -58, -100, -80, -46, 94, 28, -57}, {-64, 100, 2, -10, 15, -21, -54, 77, -30, 73, -47, -38, -62, 62, 93, 94, 54, -80, -70, -69, 26, -42, 42, -27, 95, -18, -9, -69, -1, 76, -18, 62, -94, 43, 61, -9, -36, 49, -55, -21, 82, 76, 50, -8, -46, -49, -85, 94, -43, 19, -17, -38, 2, 95, 58, 67, -85, 45, 45, -14, 86, -51, 25, -91, 90, 44, 78, -30, -83, -76, 28, -78, -50, 36, 64, 36, 89, -65, -92, -26, 2, -51, 44, 53, 24, 92, -28, 10, 70, 60}, {-41, 34, -52, 63, 16, 86, 43, 86, -38, 78, 4, 36, -9, 96, 88, 9, 86, 28, 16, 72, -3, -94, 60, -69, 77, -3, -7, 99, -72, -69, 3, -80, 9, -85, -80, 50, -62, 43, 3, -15, -44, 55, -94, 1, -70, -99, 77, 40, -82, -18, 34, 40, 58, -100, 28, 12, 8, 97, -89, 55, 27, -31, 92, 35, 11, 70, 31, 68, -29, 98, 69, 52, 14, -69, -55, -28, -38, 6, -15, 9, 56, 94, 5, 67, -9, -47, -73, 94, -36, -21}, {10, -14, -2, -47, 33, -32, -2, 66, -98, 44, 20, 69, 86, -93, -17, 88, 49, -45, -77, -27, -15, 61, -53, 55, -77, -57, 93, 32, 93, 91, -25, -63, 50, 70, 60, 66, -10, -71, -56, 55, 94, -80, 10, 37, -72, -32, 7, -68, 10, -5, -70, -55, 91, -73, 18, 93, -57, -50, 12, 17, -6, 47, -14, -9, 45, -37, 82, 29, 89, -58, -95, -56, 77, -67, 77, -80, -7, -96, 16, -45, 34, 43, -48, -12, -22, -26, -13, -67, -62, 63}, {58, 90, -38, 74, 54, 64, -46, 6, -28, -22, 7, 56, 1, 64, 34, 88, -37, 28, 84, 77, 43, -27, -25, 96, 60, -39, -99, 40, -83, 61, 12, 43, -97, 37, -86, -23, -34, 58, 93, 1, -100, -26, -29, 35, 100, -6, -51, -99, 66, -33, 9, -55, -36, 98, 51, 45, 12, 80, -12, 27, -83, 15, 46, 62, -31, 44, 65, 56, 54, 9, -41, 83, 82, 88, -19, -72, 48, -43, -4, -77, -100, 33, 71, -87, -70, -6, -59, -49, -57, 77}, {97, -72, 29, 73, -37, 11, -14, -52, 86, -93, 84, 68, -56, -17, 38, -18, -59, 56, 30, 72, -7, 71, 72, 41, -49, 16, -99, -15, 30, 38, -19, 2, -28, 44, 66, 50, 57, -28, -11, -59, 18, -67, 30, -47, 64, -17, -64, -4, -75, -48, -10, 20, -61, -24, 89, -10, -43, 4, -16, -20, -9, 78, 18, 25, -20, 12, -17, -10, -30, -86, -94, 58, 68, 6, 60, 57, 23, -68, 10, 12, -56, 94, -59, -1, -29, -69, -90, 57, -90, -57}, {-73, -88, -23, 90, 91, -32, 57, -89, 89, 27, 88, -52, 29, 17, 9, 4, 36, 58, -44, 8, -85, -81, 74, -46, 84, 47, -82, 63, -98, -29, 7, 22, 23, 79, 30, 2, -66, 16, -79, 74, 40, -2, -63, -6, -46, 26, 67, -25, 44, -84, -86, -45, 57, 26, 69, -14, 4, -50, -100, 65, 37, -79, -96, -18, -69, -5, 89, 28, -48, 4, -62, 87, -50, 58, 55, -45, 78, -51, 46, -47, 37, -73, -29, -76, -33, 78, -12, -7, 72, -34}, {50, -75, -44, -99, -20, 51, -1, -82, 57, 25, 39, -11, 90, -76, 61, 74, 100, 73, -9, 86, -61, -41, 47, 10, -72, 62, -44, 38, -72, 85, -58, -49, -56, 88, -18, -64, 48, -81, -60, 56, -10, 12, 93, -13, -28, 29, -55, 98, 95, 94, 59, -42, -3, 53, 0, 58, -43, -33, -20, -23, -36, 73, -2, 69, 21, -15, 3, 28, -53, -59, -64, -74, -18, -55, -25, -36, 19, -73, -47, 27, 92, -44, -30, -79, 6, 51, -11, 81, -74, -17}, {38, 86, 96, 26, -50, -44, -41, 69, 41, -2, -46, -97, 83, 95, -93, 55, -81, 9, -54, 31, 69, 29, -6, 82, -8, -88, -1, -3, -18, -85, -38, -2, 24, -42, -89, -62, 1, -55, 65, -67, -77, 14, 54, -65, 82, -82, -34, 44, 11, 55, 35, 59, 21, -93, -96, 85, 53, 74, 12, -21, 65, -92, -31, -68, -73, 55, -41, 63, 99, -92, 38, 98, -91, -10, 66, -8, 59, 72, 66, 29, -84, 57, -22, 46, 22, 75, -71, -48, -25, 9}, {38, -73, 40, -74, -37, -90, 24, 92, 88, 10, -4, -31, 25, -92, -43, -18, -97, 87, 46, 76, 49, -3, 99, 94, 22, -28, 58, 40, 90, 81, -90, 82, -48, 82, -36, 75, 34, -91, -61, -100, 56, -40, 43, -93, 7, -85, -97, -69, -13, -59, 26, 0, -91, -31, 61, 83, -41, 60, -64, 96, 65, -52, 39, -3, 48, -56, 67, -30, 58, -44, -65, 24, -59, 5, -46, -67, 48, -82, -71, 26, -38, 62, -18, 21, 34, -95, -83, 73, 49, -14}, {-4, 62, -88, -88, 57, -1, 1, 70, -88, -60, 65, -27, 65, -67, -36, -36, 78, -96, 29, -98, -9, 74, 25, -1, -58, 79, -44, 76, 76, 28, 30, -63, -6, 52, -28, 12, 95, -28, 58, -62, -52, 55, 79, 92, -65, 62, -99, -32, -62, 19, 14, 8, 74, 87, 9, -87, 98, -21, 62, 9, -24, 90, -52, -4, -46, -18, 98, 99, -96, 81, -50, 11, 20, -65, -40, 57, 73, -53, 48, -26, 73, 25, -61, 93, -92, -66, 56, 44, 0, 28}, {100, 79, 4, -72, 15, -44, -9, 47, -20, -7, 78, -47, 18, -25, 48, 15, -13, -51, 71, 58, 41, 58, 76, -67, 67, 83, -92, -71, -69, 29, 46, 66, 65, -70, 2, -25, 88, -30, 86, 56, 21, 38, 85, -29, -87, -16, 93, 74, -45, -26, -43, -71, 86, 48, -68, -90, -95, -7, -36, -88, 99, -57, 86, 41, -56, 53, -55, -96, 81, 26, -60, 64, 51, -77, -49, 85, 11, 93, 52, 65, 37, -68, 77, -56, 55, 39, 34, -85, 97, -21}, {5, -86, 25, -89, -3, 48, 25, -70, 20, -70, 15, -48, 91, -62, 11, 65, 57, 92, -84, 65, 92, 86, -63, -93, 99, -34, -42, -33, -56, -46, -95, 26, 10, 42, -83, -29, 6, -32, -2, 51, 14, -71, -21, -69, 49, -14, 13, 94, -35, -92, -73, 84, 8, -7, -83, 13, -56, -34, -41, -75, 62, -44, -20, 57, -85, -39, -8, 35, 83, 34, 64, 4, -86, 10, 19, -41, 25, -57, -97, 2, 73, -66, 33, 56, -93, -67, -84, -75, 37, -58}, {57, 22, 56, 98, 69, 17, -77, -89, 52, -18, 81, -44, -50, -57, -30, -29, -35, 79, 47, -67, -53, -80, 1, 37, 39, 15, -78, 85, 70, 26, 33, 62, 51, -93, -73, 73, -18, -95, -50, 99, -66, -14, -100, -96, 80, 58, 79, 81, -46, 76, -3, 52, -30, 1, -22, -26, 52, 29, 45, 53, -50, 49, -83, -100, -64, -62, -19, -94, 20, 98, -74, -45, -26, 2, -89, 43, -38, 29, -57, -40, -27, 59, -21, 75, -81, 9, -58, -82, -8, -42}, {-87, 54, -46, 8, 47, -20, -51, 72, 79, -57, 66, 83, -15, 28, 61, -55, -74, -21, 69, -9, 24, -62, 41, 84, -58, 72, 31, 6, 18, 41, 11, 48, -47, 34, -36, -22, 0, 12, 2, 46, -72, 87, -17, -47, -23, -41, 90, 22, -6, 31, -95, -47, -9, -58, 23, 50, -52, 29, -41, 97, -17, -90, -100, -85, -91, -90, 66, -91, 41, 13, -32, 73, -95, -52, 20, 63, 0, 49, -48, -8, 42, 9, -55, 44, 9, -8, -14, -12, 32, -73}, {-17, 12, -10, -65, -93, 100, -97, 31, -17, -27, -1, 87, 34, 8, -69, -59, 50, -49, 80, 96, 70, -74, 38, 18, 43, -75, -41, -78, -6, 30, 15, -51, -80, 81, 80, -77, 32, 48, 41, -14, 12, 95, -57, 42, -25, -3, -36, 3, -14, -40, -76, 51, 41, 4, -44, 86, 92, -44, 30, -89, 83, 72, 98, -80, -3, -93, 95, 74, -91, 52, 20, 15, 23, 76, 67, 0, 35, -75, -75, -45, -20, 46, 9, -82, 81, 80, -51, 1, -42, -40}, {-74, -40, 32, -33, -29, 57, -13, -22, 63, -72, -73, -3, -22, 72, 1, 47, -90, -38, 97, -15, -96, 86, 52, 9, 63, -56, 54, -65, 39, 23, -66, 90, 72, 4, 76, -100, -92, -73, 49, -30, 60, 87, -48, -73, 10, 33, -61, -1, 71, -37, 38, -65, 96, 9, 41, 85, 36, 74, 75, -99, -10, -5, -2, 4, 58, 80, 10, -66, 35, -94, 52, 99, -45, -98, 78, -74, 47, -7, -26, -67, 38, -73, -74, -38, -86, -67, 29, 69, -17, 86}, {-72, -51, 34, 84, 97, 18, 16, -21, -21, 84, -61, 85, -54, 96, -45, -98, 28, -33, 56, -78, -57, 50, -92, -49, -67, -26, 71, 76, -17, -34, -61, -78, -21, -6, -56, 95, 57, 86, 42, -76, -55, -74, 55, 31, 22, -8, 80, 52, -16, -64, -52, 72, -93, 73, -39, -21, -76, 53, 23, -99, -7, 45, 41, 91, -54, -34, 71, 3, 24, 46, 29, -90, 43, 71, 15, -78, 71, 49, 54, 83, 21, -100, -8, -15, 8, 1, -21, -42, -44, 69}, {95, 1, 14, -47, -83, -71, -15, 28, -61, 51, -94, 95, 60, 31, 16, 20, 72, -50, -64, 33, -56, 6, 27, -48, 1, 28, -51, 73, 68, -94, -94, -15, 48, -15, 86, -98, 40, -19, -79, 87, -36, 4, -95, -88, -27, 46, 74, 68, 59, 25, 84, 63, 98, 39, 1, -65, 60, 67, 2, -57, 68, 33, -3, -20, -93, -100, 93, -70, -9, 13, -90, 7, -47, -25, 28, 64, -96, 11, -63, -39, 61, -34, -88, -11, 35, -100, 31, -11, 31, 5}, {-77, -81, 68, 23, 63, 70, -18, -91, 82, 72, -40, -48, -29, -28, -67, -61, 97, -1, -74, -99, -41, 52, 48, -92, -39, -12, 39, -90, 59, 59, 38, 18, 15, 11, -19, -38, 52, -13, -18, 58, 92, 84, -73, -55, 29, 3, -73, -29, 31, 3, -44, 57, -56, -34, -74, -87, -43, -41, 6, -30, 86, 91, 86, -27, 43, -39, -35, -95, -98, 83, 70, 51, -14, -53, 60, -92, -35, -89, 45, -20, -62, -13, -72, -42, 86, -49, 63, -54, 20, -30}, {-87, -81, -66, -47, 3, 51, -87, 39, -22, 82, -87, -45, -15, 30, -17, 28, -14, 13, -37, 27, 96, 38, -51, -7, -15, -67, -46, -70, -12, 62, -55, 61, 91, -68, 6, 47, -63, 85, 69, 13, -66, -24, -80, 53, -59, 98, -56, -70, 57, 12, 60, 83, 63, 61, -17, 69, -21, 27, -71, 30, -42, 37, 0, -26, -21, -86, -3, 82, 2, -23, -86, 92, 84, -50, 4, -64, -49, 35, 93, 91, -86, 14, -1, -78, 66, -82, -81, 74, 97, 60}, {-55, -27, 67, 89, 9, 46, 78, 30, -76, -77, 59, 99, 11, -17, -67, -89, -53, -47, 55, -13, 15, -7, -43, 70, -86, -65, -47, -7, -73, 90, 79, 15, 69, 70, 79, -25, 10, 25, 67, 54, -17, 22, -23, -40, -49, 25, -8, -74, 54, -99, 80, 41, -95, -20, -96, -15, -55, 59, 72, -52, -82, 70, -64, 83, 30, -15, -8, -75, -2, -28, -33, 85, 32, -62, -22, 61, 72, -88, -10, 21, 38, -33, -70, 54, -67, 42, 22, 41, -11, 37}, {-39, -51, -54, -1, 72, -10, 76, -77, 38, -72, -63, -99, 67, 57, 16, 81, -25, 46, 95, 39, 25, 66, -20, 93, 49, 39, -69, -21, 67, 32, 33, -37, 16, 4, -56, -17, -4, -75, -80, -98, -59, 59, -71, 81, -14, -50, 99, 27, -50, 76, 50, -25, 23, -60, -40, -45, -11, 47, -82, -70, -97, -60, -100, 14, 34, 92, -74, 21, -32, 96, -62, -51, -87, -72, -93, 64, 4, 45, -65, 95, 31, -35, -47, 84, 54, -19, 62, 66, 39, 50}, {-57, -29, -16, -65, -12, -60, -90, 88, -93, 43, -88, -78, -61, 52, 66, -71, -81, 5, 74, 64, 99, -84, 21, 76, -74, -7, 6, 39, 27, -31, 53, 27, -56, 86, 33, -91, 74, -60, 19, 92, -46, 34, 87, 33, -7, -37, 95, 16, 77, -45, -62, -69, -90, 33, -2, 6, 9, -85, -34, -13, 90, -45, -46, 98, -98, 32, 64, 54, -69, 47, -97, 32, 80, -75, 13, 65, -63, -37, -82, -49, -35, 12, 8, -69, -4, 8, 59, -59, 6, 39}, {-48, -27, -25, 79, -50, 37, -16, -6, -74, -83, -10, -85, 54, 81, -43, -32, -33, -87, -62, -95, 81, 93, -95, 13, 41, -68, -79, -4, -25, -60, -72, -22, 13, 40, -28, 23, 12, -2, -31, -92, 58, -95, -15, 5, -10, 55, 67, 84, 37, -23, 55, -57, -48, -7, -21, 88, -29, -27, -7, 15, -18, -44, -64, 46, 37, 63, 95, 19, 72, 70, 54, 65, 35, -14, -14, -54, 55, 99, -36, 95, 68, 69, 94, -85, -54, 28, 50, -55, 75, 100}, {99, -74, 28, -77, 66, 37, 5, 46, 94, 77, 59, 19, -45, 72, -76, 59, 29, -70, 41, 86, -62, -63, 76, 49, -33, 96, -2, -20, -34, -88, 36, 38, -25, -31, -36, -55, 4, 76, -5, -24, -87, 50, -46, -68, -23, 42, 1, 67, 66, 46, -89, 40, -94, 5, 9, -37, 85, -42, -94, -6, -23, 88, 71, 3, -2, -76, -53, -27, 54, 25, 73, -21, -28, 75, -12, 97, -36, 9, -78, 24, 39, 83, 100, 3, 62, 63, -50, -74, -32, 89}, {-99, -94, 10, 45, -66, -67, 53, 32, -18, -17, -67, 37, -23, 100, -16, -22, 5, -66, -91, 74, 63, -33, -31, 2, 57, -29, -56, -24, -62, 20, -23, -25, 3, -75, 10, 0, -22, 83, 33, -83, 32, 0, -71, 99, 17, -81, -60, -38, -74, 21, -33, -11, -26, 34, -100, 10, 55, -47, -77, -86, -84, -62, 47, 5, 26, -69, 85, -36, 66, 17, -15, 33, 68, 40, 31, -58, 44, 21, -95, 49, 95, -29, -47, 18, -42, 78, 79, 78, 37, 69}, {52, -39, 43, -8, -51, 45, -61, -55, 88, 22, 39, -16, -52, 29, 50, -4, -28, 76, 22, 84, 0, 55, -86, 69, 61, -24, 56, 84, 74, 66, -85, -46, -48, 12, 15, -79, 87, 46, 82, -17, 61, -87, 26, 72, -49, -59, -99, 11, -8, -51, -33, 99, 16, 12, -96, 37, -12, -83, 90, -96, 29, 73, 93, 22, -48, 95, 79, 15, -41, -97, 79, 23, -55, -99, -84, -19, -13, -6, -63, -68, -66, -25, 77, 25, 34, -19, -36, -70, -50, -61}, {-22, -75, 10, 35, -20, -21, 52, 79, -56, -37, 59, 87, 85, 2, 16, -29, -100, -88, -18, 57, 73, 81, -33, -47, -49, -15, 12, -25, 61, 36, -89, 76, 34, -38, -81, 20, -39, -48, 79, -72, 10, 18, -50, 95, 64, -60, -18, 72, -98, 4, 44, 60, 80, -100, -35, 51, 64, -63, 10, 2, -84, 95, 69, 45, -69, 14, 45, -38, 66, -90, 70, -87, -82, 33, 0, 67, 62, 46, -75, -74, -14, 58, -64, 69, 87, 45, -20, 54, -15, 90}, {31, 23, 88, 47, 97, -75, -56, -13, 8, 62, 35, 100, 14, -25, 78, 51, 66, 48, 3, -11, 24, -50, 47, 48, -97, -68, -28, 82, -35, -5, 23, 55, -43, -92, -76, -27, -8, 29, -86, -86, 51, -67, 2, -62, 38, 55, 61, 37, 99, -67, -23, 17, -72, -34, 56, -45, -39, 5, 93, -5, 42, 68, -82, -26, 53, -82, -54, 90, 80, 18, 9, 52, -2, -3, 2, -23, -75, -43, -61, 9, -5, 76, 51, -74, 31, -69, 16, 72, 27, -58}, {55, 61, 60, -95, -73, 48, 84, 98, -29, 30, -96, -73, -72, -10, 48, -91, -80, -82, -40, -63, -49, 76, -58, -11, 5, -91, -29, -81, 79, 26, 74, -55, 84, 99, 98, 72, 100, -42, -73, 25, 61, -70, -2, 64, 7, -60, 25, -24, -70, -56, -75, -56, 48, 81, 18, -80, 100, -7, 74, -78, -45, -60, 82, -71, 6, 85, 64, -43, -100, 28, -45, -4, -27, 15, 7, 41, -4, -54, 87, 57, -76, -67, 72, 77, 80, -65, 42, 10, 26, -95}, {-43, -46, -2, -28, -68, -28, -78, -28, -32, -72, 13, -40, -19, -67, -1, 24, -56, -73, -88, 84, 3, -65, 49, -21, 49, 37, -41, -78, -33, 48, 56, -39, 48, -58, -34, 19, -88, 84, 65, -88, -88, -24, -33, -44, 70, 27, -99, -51, -59, 9, -22, 47, -54, 38, 91, -78, -27, -92, -8, 32, 45, 68, -67, 7, -81, 16, -10, 4, -24, -12, -58, -84, 94, -1, 83, 38, -7, -74, -86, -58, -96, -86, -87, -1, -69, 66, -63, 44, -65, -49}, {9, 73, 88, 99, -94, -99, -4, 27, -95, 5, 52, -80, -10, -60, -12, 70, -24, 89, 8, 42, 67, -49, 49, 29, -82, -50, -46, -86, 52, -68, -33, -21, 85, 92, 44, 87, -63, 12, -34, 3, 10, 20, -69, 91, 39, -89, -49, -61, 29, -6, 2, 26, 66, 5, 91, 100, 20, 70, 58, -98, -70, 90, 69, 96, -66, -56, 55, -44, 12, -7, 77, -73, 33, 74, -26, 54, -100, 6, -39, -28, 89, -92, -20, -99, -55, -59, 42, 73, 78, 15}, {-30, 80, -81, 62, 39, -64, 92, 76, 42, 96, -70, 79, -44, -7, -96, -81, -25, -27, 64, -98, -1, 26, 98, -16, 90, 22, 54, 54, 55, -29, -28, 47, -92, -22, 89, 1, -94, -6, 34, -71, -11, 77, 12, -38, -36, 60, -61, 53, 10, -91, -17, 55, -65, -43, -95, 54, 51, 31, 81, -84, 19, -87, 12, 44, 22, 79, 41, -45, -94, -9, -14, 22, -12, 58, -2, -66, -20, 9, 80, 4, 43, -13, -24, -25, 70, 85, -12, 91, 39, -34}, {29, -76, 100, -48, -32, 10, 33, 46, 38, -41, -15, -17, 94, 22, -99, 87, -17, 3, 55, 58, -29, 83, 58, -18, -53, -84, 84, -31, 72, 62, -92, 33, 99, -100, -41, -60, 79, 2, -45, -39, 81, 60, 84, 100, -7, -77, -2, 69, 17, 61, 49, -3, 5, 49, 76, 19, -46, 89, -32, 24, -53, -99, 74, -82, -90, -95, 39, -26, -70, 16, 18, -77, 42, 20, -42, 38, -38, 77, 50, 69, -75, -47, 45, -82, 68, 32, -14, 86, 63, -21}, {99, 21, -63, -24, -22, -66, -39, -63, -68, 27, 59, 33, -6, -35, -27, -20, -30, -46, -93, 100, -4, 33, -90, 71, 98, 39, -34, 66, -90, -21, -73, -33, 13, -64, 64, 98, 74, 97, 14, 40, 17, -31, 48, -2, 70, -2, 0, 96, -89, -68, 14, 5, -94, 10, 80, -4, -72, -23, 58, -24, 65, -99, -86, 82, 82, 23, 3, -74, -77, -77, -17, -14, -17, -43, 3, 88, 66, -30, 13, 94, 35, -46, 33, 42, -45, 29, -37, 76, -10, -98}, {-9, 17, -22, -17, 80, 70, 21, 27, 39, 6, -73, 16, 52, -21, 36, 27, -99, -67, 62, -82, -28, 76, 61, 9, 98, -6, 32, -67, -22, 75, 83, -56, 1, -78, -66, 18, 100, -64, -95, 68, 55, -35, 1, -76, -85, -46, -79, -69, 80, -7, -93, 36, 67, -66, -91, -49, 32, -63, -13, 34, 67, -61, -92, -56, -36, 39, -91, 93, -25, 58, -53, -3, 54, -2, 73, 26, -65, 61, 87, -49, 53, -19, 13, -10, 29, -33, -91, -82, 4, 91}, {-11, -80, -8, 65, 3, -22, 27, -1, -24, 19, 44, 54, -51, -45, -3, 93, -94, 56, 12, 87, -52, 93, 13, 51, 20, 8, 25, -57, -22, 56, 41, -33, 99, 52, 57, -44, 16, -73, -78, -43, -78, 42, -83, -95, 68, -69, 45, -12, -46, 48, -100, -67, -88, 75, -36, 31, -84, -41, 29, 6, -30, 11, -17, -1, 15, -73, 81, -85, -100, -25, -82, -72, -95, 34, 96, 65, -13, -34, -92, 2, 15, -27, 49, -66, -60, 35, -7, 76, -14, 15}, {-22, -4, -18, 61, 86, 73, 21, -36, 100, -88, -72, -38, 23, 0, 89, 34, -96, -44, 35, 40, 65, -38, -13, 10, 82, -75, -36, 46, 43, -45, -5, -40, -53, -63, 75, -50, -78, 19, 44, -56, -55, -82, 0, -39, 53, 91, 29, 87, -95, 80, 88, -68, 54, -63, -20, -49, -64, -13, 49, 30, 90, 39, 28, 54, 42, -38, 5, -49, -15, 12, -82, -27, -18, 93, -100, -29, -85, 88, -32, -27, 86, 98, -11, 51, -70, 23, -97, 20, -49, 86}, {-53, -96, -55, 53, -41, 69, -16, -92, 75, 18, 54, -54, -78, -54, 47, 47, 30, -90, 7, -70, -17, 96, 56, -50, 36, -76, 62, 34, -78, -5, 57, 34, 22, 84, -80, -5, 83, 74, 81, -63, 14, -73, 68, 93, -100, 91, -61, -45, 35, 17, -9, -44, -9, 44, 10, 54, -29, 30, -95, -83, -42, -56, -85, 20, 35, -81, 72, 97, 59, -46, 83, -67, -81, -93, 79, 44, 66, 93, 34, -43, -52, 84, -3, 3, 28, -59, 97, -8, -82, 93}, {-45, 80, -32, -21, 27, 98, 45, -77, -83, 94, -45, -59, -13, 35, -64, 6, -34, 77, -76, -89, -69, 64, -35, 43, 32, 34, -49, -43, -98, -70, 88, 72, 78, -80, 85, 97, 89, -31, 80, 82, 31, 60, -83, -28, -1, 81, -51, 18, -4, -21, -31, -53, 37, -20, 83, -73, 35, 87, -41, -29, 54, -99, -34, 21, 0, 20, -19, -36, 78, 68, -21, -89, 53, -95, -61, -50, 51, 42, 53, -33, 51, 8, -22, -13, 22, -38, -10, 45, -66, 87}, {92, -37, -22, -60, -68, 26, 81, -63, 93, 14, -77, 29, 49, 44, 92, -59, 71, 45, -84, -24, -10, -100, -24, -93, 70, -94, -91, 57, -40, 10, -36, 37, -78, 13, 38, 70, -93, 84, -23, 42, -63, -55, 51, 41, -39, -12, 46, -13, -4, -10, 96, -93, 47, -26, 80, 37, 57, -10, 63, -91, -37, 61, -49, -70, -94, -13, 57, 34, -36, -53, -48, 27, -100, -79, -56, 98, 14, 34, 97, -85, -81, -39, 15, 26, 4, 95, -83, 87, 82, 34}, {63, 0, 20, 68, -52, 23, -88, 19, 39, 30, 17, 28, 98, 78, -5, -14, -57, 60, -40, 73, 49, -15, 91, 40, 73, -99, -23, 43, -60, -75, 31, -34, 30, -82, 45, -48, 94, 40, -79, -61, -14, -22, 91, 77, -52, 16, 40, -65, -100, 66, -8, -75, 62, 45, -42, -91, -24, 93, -75, -9, 53, 60, -51, -99, 61, -86, 78, 6, -15, 76, 80, 44, 23, 17, 29, -77, -48, -12, 75, -9, 73, 28, 26, -98, 32, 100, -77, 32, -21, 68}, {-6, -99, 59, -23, -13, 96, 86, -66, -41, -70, -13, 76, 44, 74, -10, -60, 22, 24, -30, -50, 33, -9, 35, -7, 92, 1, 47, 73, 3, -91, -92, -19, -76, -84, 17, -2, 96, -85, -54, 38, -47, 11, 50, 67, -21, 59, 86, -26, 13, -65, -33, 68, -31, 73, 9, 56, -94, 19, 62, -25, -85, 26, 1, 82, 86, 55, 22, -3, -26, -3, -29, 93, -8, 91, -9, 15, 13, 77, -63, -58, -56, 41, -65, -84, -19, -48, -79, -21, -59, -69}, {-31, 87, -25, -64, 60, -67, 89, -60, -19, 94, 28, 47, -34, -24, -70, 37, 90, 53, -50, -52, -73, -35, 50, 63, 48, -81, 1, -73, -67, -45, 74, -38, -10, 65, 83, -49, -7, -19, -42, -12, -69, 17, -2, -60, -88, -96, -10, 31, 7, 56, -87, -49, -17, -6, 3, -54, -98, -79, 49, 18, -86, 45, -4, -59, -76, -2, -82, 79, 8, -58, 33, -63, 40, -50, 53, -3, -10, 90, -79, 100, -17, 75, -68, -39, -32, -100, -86, 68, 3, 86}, {-12, 58, 16, -17, 39, -70, -63, -75, -85, 16, -18, -47, 93, -84, -39, 36, -5, 87, -4, -70, -25, 83, -7, -28, -45, -49, 79, 90, 59, 39, -26, 40, 48, 72, -39, 36, 100, -53, -93, 37, -92, 39, 2, 34, 61, 32, 60, 61, -93, 68, -18, 46, 23, -2, 13, -13, 64, -98, 96, 55, -75, 97, -29, 20, -49, 94, 70, -64, 68, 26, 88, 26, -13, 91, 88, -17, -62, 24, 81, -61, 7, -63, -24, -94, 1, -52, -100, 7, -63, 16}, {79, -83, 95, -98, -76, 26, 46, 55, -13, 75, 6, 98, 56, 98, -48, -25, -60, -47, -40, -58, -52, -72, 5, 19, 5, -99, 81, 9, 3, 22, 10, 77, -22, 31, 44, 29, -72, 9, -86, -41, -93, 30, -35, -15, -21, -55, 51, -17, 44, -55, -84, 76, -46, -10, 68, 76, -47, -10, 100, -44, 73, 22, -23, -54, -71, 86, -14, -80, 34, 81, -64, 0, -68, -36, 51, 87, 52, -44, 100, 56, 47, 100, -77, 61, -53, -75, -45, -90, 3, 2}, {-84, 39, -84, -27, 68, -65, 35, 19, 52, -53, 75, 56, 76, 35, 93, 13, 53, -5, 87, -90, -23, 59, -52, -91, 54, -72, 22, 97, -88, 9, -66, -74, -15, -79, 55, -14, 34, -15, -70, -1, 97, 54, -79, -24, 61, -38, 79, 60, -67, -48, 71, 18, 75, 1, 23, 13, -15, 45, -45, -50, 62, -55, -70, 95, 64, -38, 81, -91, 24, 37, -88, 8, 58, -42, 30, 43, -88, -61, -9, -59, -67, -75, 7, 71, 31, 12, -1, 24, 59, 51}, {-82, 1, 65, 9, 60, 39, -80, -66, 38, -65, -15, 41, -29, -83, -95, 87, 43, 46, 32, 22, 60, 60, 35, 20, -24, 40, -8, -46, -20, 30, -57, 10, -63, 6, -55, 50, 76, 59, -4, -92, 98, -42, 43, -91, -67, -14, -78, 18, 98, 75, 53, 2, 13, -5, 2, 45, -32, 53, -18, 47, -64, -48, -17, 41, -81, 61, -61, -32, 86, 53, 86, -13, -99, 8, -51, -13, 70, 65, 39, -31, 39, 54, 100, 67, -4, -37, -28, -33, -38, -72}, {38, 98, -3, 86, 18, 65, 76, -91, 25, 73, -62, 20, 1, -14, 78, -61, 10, -2, -87, -49, -48, -52, 30, -95, -9, -38, -6, 25, 52, 91, -80, 32, -7, 93, -38, 78, -50, 32, -10, -84, 97, 45, 6, -47, 9, -84, 63, -33, -51, 93, 100, -47, 49, -3, 91, -25, 97, -5, -67, -70, 7, -94, -78, 73, -96, 57, -71, -81, 4, -40, 21, -85, -33, -21, -39, 49, 48, 38, -1, -43, 76, 28, 74, -59, -26, -21, 9, -78, 85, 96}, {95, -72, 15, -59, 79, -37, 61, 17, 67, -84, -51, 86, 11, -86, -26, -47, -95, -22, 50, 43, -59, 78, -6, -77, 21, -8, -13, 58, -35, -7, 27, 4, -32, -43, -43, -93, -91, -52, 68, -65, -28, 83, 58, 9, 85, 64, 55, 9, 83, -50, -26, 20, 86, -21, -20, 85, 2, 96, -73, 94, -17, 12, 3, 0, 49, -81, 22, -13, 40, -53, 34, -25, -83, -99, -27, 85, 88, 19, 66, 19, 89, 11, -98, -92, -72, 48, -51, -9, 3, -19}, {-93, 85, 68, 66, 55, -26, 42, -7, 75, 99, 18, -20, 20, -33, 33, 77, 17, 40, 42, -69, 6, -41, 62, 27, 36, -55, 5, 78, -99, 73, -79, 66, -25, -33, -4, 84, -35, -8, 41, -7, 96, 48, 38, -88, -44, 37, -81, -30, 80, 26, 49, -84, -82, -94, -10, 2, 57, 96, 85, 87, -51, -99, -95, 50, -70, 54, 73, 24, 38, 46, 72, -35, 24, -43, 34, 13, -61, -8, 80, 84, -14, -66, -20, 96, -47, -74, 91, -63, -8, -50}}));

    }
}
